#!/usr/bin/perl

# generate .xml file that can be used with LoadGusXml plugin
# from the GusSchema/Definition/config/database_documentation.xml
# prints converted file to STDOUT
# usage: generateDatabaseDocXml > db_doc.xml

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use DBI;
use DBD::Oracle;
use DBD::Pg;
use CBIL::Util::PropertySet;

my ($gusConfigFile, $file);

&GetOptions('gus_config=s' => \$gusConfigFile,
	    'file=s' => \$file
            );

unless(-e $gusConfigFile) {
  print STDERR "gus.config not found... using default\n";
  $gusConfigFile = $ENV{GUS_HOME} ."/config/gus.config";
}

unless(-e $file) {
  $file = $ENV{GUS_HOME} . "/config/database_documentation.xml";
  print STDERR "Documentation file not specified ... using $file\n";
}

my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

my $u = $gusconfig->{props}->{databaseLogin};
my $pw = $gusconfig->{props}->{databasePassword};
my $dsn = $gusconfig->{props}->{dbiDsn};

my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;

my $sql = <<SQL;
SELECT t.table_id FROM CORE.TableInfo t, CORE.DatabaseInfo d
WHERE lower(d.name) = lower(?) AND lower(t.name) = lower(?)
AND d.database_id = t.database_id
SQL

my $sh = $dbh->prepare($sql);

my %tables; # avoid duplicate DB lookups
my ($databaseName, $tableName, $tableId);
open(FILE, $file) or die "Cannot open file $file for reading: $!";
while (<FILE>) {
  if (/<table>/) {
    $_ =~ m/<table>([\s\S]*?)<\/table>/;
    my $table = $1;
    my $tableId = $tables{$table};

    unless($tableId) {
      ($databaseName, $tableName) = split /\./, $table;
      $sh->execute($databaseName, $tableName);
      $tableId = $sh->fetchrow_array();
      $tables{$table} = $tableId;
    }
    print "<table_id>$tableId</table_id>\n";
  }
  else {
    print $_;
  }
}

